// Code generated by protoc-gen-go. DO NOT EDIT.
// source: exserver.proto

package exserverpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import reflexpb "github.com/luno/reflex/reflexpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EchoMsg struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoMsg) Reset()         { *m = EchoMsg{} }
func (m *EchoMsg) String() string { return proto.CompactTextString(m) }
func (*EchoMsg) ProtoMessage()    {}
func (*EchoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_exserver_132dad02bda3617a, []int{0}
}
func (m *EchoMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoMsg.Unmarshal(m, b)
}
func (m *EchoMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoMsg.Marshal(b, m, deterministic)
}
func (dst *EchoMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoMsg.Merge(dst, src)
}
func (m *EchoMsg) XXX_Size() int {
	return xxx_messageInfo_EchoMsg.Size(m)
}
func (m *EchoMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoMsg.DiscardUnknown(m)
}

var xxx_messageInfo_EchoMsg proto.InternalMessageInfo

func (m *EchoMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoMsg)(nil), "exserverpb.EchoMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExServerClient is the client API for ExServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExServerClient interface {
	StreamEvent1(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (ExServer_StreamEvent1Client, error)
	StreamEvent2(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (ExServer_StreamEvent2Client, error)
	Echo(ctx context.Context, in *EchoMsg, opts ...grpc.CallOption) (*EchoMsg, error)
}

type exServerClient struct {
	cc *grpc.ClientConn
}

func NewExServerClient(cc *grpc.ClientConn) ExServerClient {
	return &exServerClient{cc}
}

func (c *exServerClient) StreamEvent1(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (ExServer_StreamEvent1Client, error) {
	stream, err := c.cc.NewStream(ctx, &_ExServer_serviceDesc.Streams[0], "/exserverpb.ExServer/StreamEvent1", opts...)
	if err != nil {
		return nil, err
	}
	x := &exServerStreamEvent1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExServer_StreamEvent1Client interface {
	Recv() (*reflexpb.Event, error)
	grpc.ClientStream
}

type exServerStreamEvent1Client struct {
	grpc.ClientStream
}

func (x *exServerStreamEvent1Client) Recv() (*reflexpb.Event, error) {
	m := new(reflexpb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exServerClient) StreamEvent2(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (ExServer_StreamEvent2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_ExServer_serviceDesc.Streams[1], "/exserverpb.ExServer/StreamEvent2", opts...)
	if err != nil {
		return nil, err
	}
	x := &exServerStreamEvent2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExServer_StreamEvent2Client interface {
	Recv() (*reflexpb.Event, error)
	grpc.ClientStream
}

type exServerStreamEvent2Client struct {
	grpc.ClientStream
}

func (x *exServerStreamEvent2Client) Recv() (*reflexpb.Event, error) {
	m := new(reflexpb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exServerClient) Echo(ctx context.Context, in *EchoMsg, opts ...grpc.CallOption) (*EchoMsg, error) {
	out := new(EchoMsg)
	err := c.cc.Invoke(ctx, "/exserverpb.ExServer/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExServerServer is the server API for ExServer service.
type ExServerServer interface {
	StreamEvent1(*reflexpb.StreamRequest, ExServer_StreamEvent1Server) error
	StreamEvent2(*reflexpb.StreamRequest, ExServer_StreamEvent2Server) error
	Echo(context.Context, *EchoMsg) (*EchoMsg, error)
}

func RegisterExServerServer(s *grpc.Server, srv ExServerServer) {
	s.RegisterService(&_ExServer_serviceDesc, srv)
}

func _ExServer_StreamEvent1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(reflexpb.StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExServerServer).StreamEvent1(m, &exServerStreamEvent1Server{stream})
}

type ExServer_StreamEvent1Server interface {
	Send(*reflexpb.Event) error
	grpc.ServerStream
}

type exServerStreamEvent1Server struct {
	grpc.ServerStream
}

func (x *exServerStreamEvent1Server) Send(m *reflexpb.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _ExServer_StreamEvent2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(reflexpb.StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExServerServer).StreamEvent2(m, &exServerStreamEvent2Server{stream})
}

type ExServer_StreamEvent2Server interface {
	Send(*reflexpb.Event) error
	grpc.ServerStream
}

type exServerStreamEvent2Server struct {
	grpc.ServerStream
}

func (x *exServerStreamEvent2Server) Send(m *reflexpb.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _ExServer_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExServerServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exserverpb.ExServer/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExServerServer).Echo(ctx, req.(*EchoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exserverpb.ExServer",
	HandlerType: (*ExServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _ExServer_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvent1",
			Handler:       _ExServer_StreamEvent1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamEvent2",
			Handler:       _ExServer_StreamEvent2_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "exserver.proto",
}

func init() { proto.RegisterFile("exserver.proto", fileDescriptor_exserver_132dad02bda3617a) }

var fileDescriptor_exserver_132dad02bda3617a = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xad, 0x28, 0x4e,
	0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x82, 0xf1, 0x0b, 0x92,
	0xa4, 0x74, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x73, 0x4a, 0xf3,
	0xf2, 0xf5, 0x8b, 0x52, 0xd3, 0x72, 0x52, 0x2b, 0xa0, 0x54, 0x41, 0x12, 0x94, 0x01, 0xd1, 0xa9,
	0xa4, 0xcc, 0xc5, 0xee, 0x9a, 0x9c, 0x91, 0xef, 0x5b, 0x9c, 0x2e, 0x24, 0xc1, 0xc5, 0x9e, 0x9b,
	0x5a, 0x5c, 0x9c, 0x98, 0x9e, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe3, 0x1a, 0xed,
	0x62, 0xe4, 0xe2, 0x70, 0xad, 0x08, 0x06, 0xdb, 0x20, 0x64, 0xc3, 0xc5, 0x13, 0x5c, 0x52, 0x94,
	0x9a, 0x98, 0xeb, 0x5a, 0x96, 0x9a, 0x57, 0x62, 0x28, 0x24, 0xae, 0x07, 0x33, 0x59, 0x0f, 0x22,
	0x1e, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0xc5, 0x8f, 0x90, 0x00, 0x2b, 0x55, 0x62, 0x30,
	0x60, 0x44, 0xd3, 0x6d, 0x44, 0xa2, 0x6e, 0x23, 0x2e, 0x16, 0x90, 0x6b, 0x85, 0x84, 0xf5, 0x10,
	0x1e, 0xd6, 0x83, 0xba, 0x5f, 0x0a, 0x9b, 0xa0, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0xa3, 0xc6, 0x80,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xc4, 0x21, 0xef, 0x34, 0x01, 0x00, 0x00,
}
